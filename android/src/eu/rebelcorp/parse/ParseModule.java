/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package eu.rebelcorp.parse;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import android.content.Context;

import com.parse.Parse;
import com.parse.PushService;
import com.parse.ParseAnalytics;
import com.parse.ParseInstallation;

@Kroll.module(name="Parse", id="eu.rebelcorp.parse")
public class ParseModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "ParseModule";
    
    // tiapp.xml properties containing Parse's app id and client key
    public static String PROPERTY_APP_ID = "Parse_AppId";
    public static String PROPERTY_CLIENT_KEY = "Parse_ClientKey";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public ParseModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
        String appId = TiApplication.getInstance().getAppProperties().getString(ParseModule.PROPERTY_APP_ID, "");
        String clientKey = TiApplication.getInstance().getAppProperties().getString(ParseModule.PROPERTY_CLIENT_KEY, "");
        
        Log.d(TAG, "Initializing with: " + appId + ", " + clientKey + ";");
        
        Parse.initialize(TiApplication.getInstance(), appId, clientKey);
    }

	// Methods
	@Kroll.method
	public void start(@Kroll.argument String id, @Kroll.argument String client)
	{
//		Parse.initialize(TiApplication.getInstance(), id, client);
	}

    @Kroll.method
    public void enablePush() {
        Context context = TiApplication.getInstance().getApplicationContext();

		// Register Push
        PushService.setDefaultPushCallback(context, TiApplication.getAppRootOrCurrentActivity().getClass());
		ParseInstallation.getCurrentInstallation().saveInBackground();

		// Track Push opens
		ParseAnalytics.trackAppOpened(TiApplication.getAppRootOrCurrentActivity().getIntent());
    }

	@Kroll.method
	public void subscribeChannel(@Kroll.argument String channel) {
		Context context = TiApplication.getInstance().getApplicationContext();

		// Add channel
		PushService.subscribe(context, channel, TiApplication.getAppRootOrCurrentActivity().getClass());
	}

	@Kroll.method
	public void unsubscribeChannel(@Kroll.argument String channel) {
		Context context = TiApplication.getInstance().getApplicationContext();

		// Remove channel
		PushService.unsubscribe(context, channel);
	}

}
